/*Resource Acquisition Is Initialization */
#include<iostream>
#include<thread>
#include<unistd.h>

using namespace std;

class thread_guard {
	private:
		thread &t;
	public:
		thread_guard(thread& t_): t(t_) {
			cout<<"Thread_guard constructor is called"<<endl;
		}
		~thread_guard() {
			cout<<"Thread_guard destructor is called"<<endl;
			if (t.joinable()) {
				cout<<"Thread_guard join is called"<<endl;
				t.join();
			}
		}
		thread_guard(thread_guard const&) = delete; /* Copy constructor disabled */
		thread_guard& operator= (thread_guard const&) = delete; /*Copy assignment operator disabled*/
};

class widget {
	private:
		int a;
		string& s;
	public:
		widget(int& i, string& str):a(i),s(str) {
			cout<<"Widget constructor is called for"<<a<<"   "<<str<<endl;
		}
		~widget() {
			cout<<"Widget destructor is being called"<endl;
		}
		void widgetfunc() const {
			cout<<"Widget function is called for a = "<<a<<endl;
			s= "Deepoo";
			cout<<"Widget function changed s as "<<s<<endl;
		}
		widget(widget const&) = delete;
		widget& operator= (widget const&) = delete;
};

void anuarg(int a, string const& b) {
	cout<<"We are in anuarg"<<endl;
	usleep(100000);
	cout<<a<<endl<<b<<endl;
	cout<<"Anuarg is exited"<<endl;
}

void anu() {
	cout<<"Anupam is being called"<<endl;
	usleep(100000);
	cout<<"Anupam is exited"<<endl;
}

int main() {
	char buffer[1000] = "Anupam Kumar Singh";
	thread t1(anu);
	thread t2(anuarg, 2,"Anupam");
	thread t3(anuarg, 3, string(buffer)); //string(buffer) avoids the dangling pointer if char a got out of scope 
	thread t4 {widget(2, ref("Anupam"))};

	thread_guard tg1(t1);
	thread_guard tg2(t2);
	thread_guard tg3(t3);
	thread_guard tg4(t4);

	cout<<"Main thread exits"<<endl;
}
